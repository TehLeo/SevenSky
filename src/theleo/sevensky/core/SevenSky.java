/*
 * Copyright (c) 2018, Juraj Papp
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package theleo.sevensky.core;

import com.jme3.asset.AssetManager;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.FastMath;
import com.jme3.math.Matrix4f;
import com.jme3.math.Quaternion;
import com.jme3.math.Vector2f;
import com.jme3.math.Vector3f;
import com.jme3.math.Vector4f;
import com.jme3.post.Filter;
import com.jme3.post.SceneProcessor;
import com.jme3.profile.AppProfiler;
import com.jme3.renderer.Camera;
import com.jme3.renderer.RenderManager;
import com.jme3.renderer.Renderer;
import com.jme3.renderer.ViewPort;
import com.jme3.renderer.queue.RenderQueue;
import com.jme3.scene.Geometry;
import com.jme3.scene.Mesh;
import com.jme3.scene.VertexBuffer;
import com.jme3.texture.FrameBuffer;
import com.jme3.texture.Image;
import com.jme3.texture.Texture;
import com.jme3.texture.Texture2D;
import java.util.ArrayList;
import templates.geom.Vector3d;
import templates.misc.QueryAvg;
import templates.util.MiscUtils;
import theleo.sevensky.core.SkyVars.Key;
import static theleo.sevensky.core.Space.blackbodyIrradiance;
import static theleo.sevensky.core.Space.blackbodyIrradianceIntegral;
import theleo.sevensky.elements.Clouds;
import theleo.sevensky.elements.Sky;

/**
 *
 * @author Juraj Papp
 */
public class SevenSky implements SceneProcessor {

	public static boolean HALF_RES = false;
	public static boolean milkyway = false;
	
	public static float starMult = 10f;

	boolean init = false;
	public float resolutionScale = 0.5f;

	private ArrayList<SkyElement> skyElements = new ArrayList<SkyElement>();
	public AssetManager am;
	public RenderManager rm;

	public void add(SkyElement h) {
		skyElements.add(h);
		if (init) {
			h.init(this);
		}
	}

	@Override
	public void initialize(RenderManager rm, ViewPort vp) {
		if(init) return;
		this.rm = rm;
		init = true;
		for (int i = 0; i < skyElements.size(); i++) {
			skyElements.get(i).init(this);
		}
	}

	@Override
	public void reshape(ViewPort vp, int w, int h) {

	}

	@Override
	public boolean isInitialized() {
		return init;
	}

	@Override
	public void preFrame(float tpf) {
	}

	@Override
	public void postQueue(RenderQueue rq) {
	}

	@Override
	public void postFrame(FrameBuffer out) {
		for (int i = 0; i < skyElements.size(); i++) {
			skyElements.get(i).prepareRenderView();
		}
		beginRenderView();
		for (int i = 0; i < skyElements.size(); i++) {
			skyElements.get(i).renderView();
		}
		endRenderView();
//			app.getCamera().onViewPortChange();
//			app.getRenderManager().setCamera(app.getCamera(), false);
		applySky(rm);
		
//		beginRenderPostProcess();
//		postQuad.getMaterial().render(postQuad, rm);
//		endRenderPostProcess();
	}

	@Override
	public void cleanup() {

	}

	@Override
	public void setProfiler(AppProfiler profiler) {
	}

	private FrameBuffer boundRef;

	public void beginRenderView() {
		rm.setCamera(cam, cam.isParallelProjection());

		Renderer r = rm.getRenderer();

		boundRef = MiscUtils.getRenderContext(r).boundFB;

		r.setFrameBuffer(SkyViewFb);
//			r.setBackgroundColor(ColorRGBA.BlackNoAlpha);
		r.setBackgroundColor(ColorRGBA.Black);
		r.clearBuffers(true, false, false);
	}

	public void endRenderView() {
		Renderer r = rm.getRenderer();
	    if(mipMap != null) mipMap.beginTimeElapsed();
		r.setFrameBuffer(boundRef);
		if(mipMap != null) mipMap.end();
		boundRef = null;
	}
	
	public static class LightFilter extends Filter {
		public static Key TONE_MAP_SCALE = new Key("TONE_MAP_SCALE", Float.class);
		public static Key TONE_MAP_FROM = new Key("TONE_MAP_FROM", Float.class);
		public static Key TONE_MAP_TO = new Key("TONE_MAP_TO", Float.class);
		
	    public Material mat;
		public SkyVars vars;

		public LightFilter(SkyVars vars) {
			super("SkyLightFilter");
			this.vars = vars;
		}
		
		@Override
		protected void initFilter(AssetManager am, RenderManager renderManager, ViewPort vp, int w, int h) {
			mat = new Material(am, "MatDefs/Sky/Post.j3md");
			mat.setFloat("ToneMapScale", vars.getF(TONE_MAP_SCALE));
			mat.setFloat("ToneMapFrom", vars.getF(TONE_MAP_FROM));
			mat.setFloat("ToneMapTo", vars.getF(TONE_MAP_TO));
			mat.setVector3("SunLight", vars.getVec3(Sky.SunLight));
			mat.setVector3("SunDir", vars.getVec3(Sky.SunDir));
			Texture2D T = vars.get(Sky.TRANSMITTANCE_LUT);
			if(T == null) {
				System.err.println("TransmittanceLut not created.");
			}
			mat.setTexture("TransmittanceLut", T);
			
			mat.setTexture("CloudShadowMap", vars.get(Clouds.WEATHER_MAP));
			mat.setFloat("Coverage", vars.get(Clouds.Coverage));
			mat.setFloat("PLANET_RAD", vars.getF(Sky.PLANET_RADIUS));
			mat.setFloat("PLANET_ATMOS_RAD", vars.getF(Sky.ATMOSPHERE_RADIUS));				
			mat.setVector2("CloudOffset", vars.get(Clouds.CloudOffset));
		}
		@Override
		protected boolean isRequiresDepthTexture() {
			return true;
		}
		@Override
		protected Material getMaterial() {
			return mat;
		}

		@Override
		protected void preFrame(float tpf) {
			mat.setVector2("CloudOffset", vars.get(Clouds.CloudOffset));
		}
		
	}
	

	public Geometry fsQuad;
	public Material mat;

	FrameBuffer SkyViewFb;
	public Texture2D SkyViewTex;
	
	public Geometry applyQuad, postQuad;

	public Geometry stars;

	public double SunEarthDistKm;
	public double MoonEarthDist;

	public Vector3d SunSpectralPercentage = new Vector3d(1, 1, 1);
	public double SunIrradianceEarth;

//	public Vector3f sunDir = new Vector3f(1, 1, 0).normalizeLocal();
	public Vector3f moonDir = new Vector3f(0, 1, 0);

	public Vector3f SunIrradianceEarth3 = new Vector3f(1, 1, 1);

	public Camera cam;

	public SkyVars c;


	Texture2D milkyWay;

	public SevenSky(SkyVars c, Camera cam, RenderManager rm, AssetManager am) {

		this.am = am;
		this.c = c;

		this.cam = cam;
		lastLightDir = c.getVec3(Sky.SunDir);

		int viewW = cam.getWidth();
		int viewH = cam.getHeight();
		if (HALF_RES) {
			viewW >>= 1;
			viewH >>= 1;
		}			

		Image.Format fmt = Image.Format.RGBA32F;

		SkyViewFb = new FrameBuffer(viewW, viewH, 1);

		SkyViewTex = new Texture2D(viewW, viewH, fmt);
		SkyViewTex.setMinFilter(Texture.MinFilter.BilinearNearestMipMap);
		SkyViewTex.setMagFilter(Texture.MagFilter.Bilinear);
		SkyViewTex.getImage().setMipMapSizes(new int[]{0, 1});
		SkyViewFb.setColorTexture(SkyViewTex);


		fsQuad = createFullScreenQuad();
		mat = new Material(am, "MatDefs/Sky/SkyBake.j3md");
		mat.selectTechnique("HD", rm);
		mat.setVector3("SunDir", c.getVec3(Sky.SunDir));
		mat.setVector3("MoonPos", moonDir.mult((float) (MoonEarthDist * 1000f)));

		double[] BANDS = new double[]{
			780e-9, 615e-9,
			615e-9, 495e-9,
			495e-9, 380e-9
		};
		SunSpectralPercentage.set(calcColor(BANDS, Space.SOLAR_PHOTOSPHERE_TEMP));

		applyQuad = createFullScreenQuad(0.99999f);
		Material applyMat = new Material(am, "MatDefs/Sky/SkyApply.j3md");
//			applyMat.setTexture("ColorMap", SkyViewFb.flapTex);
//		applyMat.getAdditionalRenderState().setDepthWrite(false);
		applyMat.setTexture("ColorMap", SkyViewTex);
//		applyMat.selectTechnique("Deffered2", rm);
		applyQuad.setMaterial(applyMat);
		
//		postQuad = createFullScreenQuad();
//		Material postMat = new Material(am, "MatDefs/Sky/Post.j3md");
		

		milkyWay = (Texture2D) am.loadTexture("Textures/MilkyWay4096.png");
		milkyWay.setWrap(Texture.WrapMode.Repeat);
		milkyWay.setMinFilter(Texture.MinFilter.BilinearNoMipMaps);
		if (milkyway) {
			applyMat.setTexture("MilkyWay", milkyWay);
		}


	}
	public static Vector3d calcColor(double[] BANDS, double tempK) {
		double[] vals = new double[6];
		vals[0] = blackbodyIrradianceIntegral(BANDS[0], tempK, 128);
		vals[1] = blackbodyIrradianceIntegral(BANDS[1], tempK, 128);
		if (BANDS[1] == BANDS[2]) {
			vals[2] = vals[1];
		} else {
			vals[2] = blackbodyIrradianceIntegral(BANDS[2], tempK, 128);
		}
		vals[3] = blackbodyIrradianceIntegral(BANDS[3], tempK, 128);
		if (BANDS[3] == BANDS[4]) {
			vals[4] = vals[3];
		} else {
			vals[4] = blackbodyIrradianceIntegral(BANDS[4], tempK, 128);
		}
		vals[5] = blackbodyIrradianceIntegral(BANDS[5], tempK, 128);

		double R = vals[0] - vals[1];
		double G = vals[2] - vals[3];
		double B = vals[4] - vals[5];

		//double scale = 1.0/Math.max(Math.max(R,G),B);
		double scale = 1.0 / blackbodyIrradiance(tempK);

		return new Vector3d(R * scale, G * scale, B * scale);
	}
	Geometry marsQuad, jupQuad;
	Geometry textQuad;

	float SunScaleTest = 1f;

	public void setSunScaleTest(float val) {
		SunScaleTest = val;
		setSunEarthDist(SunEarthDistKm);
	}

	public void setSunEarthDist(double distKm) {
		this.SunEarthDistKm = distKm;
		SunIrradianceEarth = Space.starIrradiance(Space.SOLAR_LUMINOSITY, distKm * 1000.0);
		SunIrradianceEarth3 = SunSpectralPercentage.toVector3f().multLocal((float) SunIrradianceEarth);
		SunIrradianceEarth3.multLocal(SunScaleTest);

		mat.setVector3("SunIrradiance", SunIrradianceEarth3);
	}

	public void setSunDir(Vector3f sunDir) {
		Vector3f s = c.getVec3(Sky.SunDir);
		s.set(sunDir);
		mat.setVector3("SunDir", sunDir);
	}

	public void setMoonDir(Vector3f moonDir) {
		this.moonDir.set(moonDir);
		mat.setVector3("MoonPos", moonDir.mult((float) (MoonEarthDist * 1000f)));
	}

	Quaternion quat(Vector3f d, Vector3f z) {
		Quaternion q = new Quaternion();
		Vector3f zxd = z.cross(d);
		q.set(zxd.x, zxd.y, zxd.z, FastMath.sqrt(z.dot(z) * d.dot(d)) + z.dot(d));
		q.normalizeLocal();
		return q;
	}

	Vector3f qmult(Quaternion q, Vector3f v) {
		Vector3f res = new Vector3f();
		v.cross(q.getX(), q.getY(), q.getZ(), res);
		res.addLocal(q.getW() * v.x, q.getW() * v.y, q.getW() * v.z);
		res.cross(q.getX(), q.getY(), q.getZ(), res);
		res.addLocal(res);
		res.addLocal(v);
		return res;
		//return v + 2.0*cross(cross(v, q.xyz) + q.w*v, q.xyz);
	}

	public Vector3f getRelativeDir(Vector3f dir, Vector3f relTo) {
		Quaternion q = quat(Vector3f.UNIT_Y, dir);
		return qmult(q, relTo);
	}

	public void renderClouds(RenderManager rm) {

	}


	public static Vector3f sphereUniformPoint(float radius, Vector3f store) {
		float l = FastMath.pow(FastMath.nextRandomFloat(), 1f / 3f);
		float u = FastMath.nextRandomFloat() * 2f - 1f;
		float o = FastMath.nextRandomFloat() * FastMath.TWO_PI;

		store.z = radius * l * u;
		u = FastMath.sqrt(1f - u * u);

		store.x = radius * l * u * FastMath.cos(o);
		store.y = radius * l * u * FastMath.sin(o);

		return store;
	}

	public void enableDebug() {
		applyQ = new QueryAvg("Apply");
		mipMap = new QueryAvg("MipMap");
	}
	QueryAvg applyQ;
	QueryAvg mipMap;

	Geometry planet;
	public Vector3f lastLightDir;

	
	public void applySky(RenderManager rm) {
		if(applyQ != null) applyQ.beginTimeElapsed();

		applyQuad.getMaterial().render(applyQuad, rm);

		if(applyQ != null) applyQ.end();
	}

	


//		public Geometry createMilkyWayQuad(AssetManager am, Camera cam) {
//			Geometry quad = createFullScreenQuad(cam.getWidth()/(float)cam.getHeight(), cam.getProjectionMatrix().invert());
//
////			Geometry quad = createFullScreenQuad();
//			quad.setCullHint(Spatial.CullHint.Never);
//			Material mat = new Material(am, "MatDefs/Sky/MilkyWay.j3md");
//			
//			Texture milkyway = am.loadTexture("Textures/MilkyWay4096.png");
//			milkyway.setWrap(Texture.WrapMode.Repeat);
//			milkyway.setMinFilter(Texture.MinFilter.BilinearNoMipMaps);
//			mat.setTexture("ColorMap", milkyway);
//			mat.getAdditionalRenderState().setFaceCullMode(RenderState.FaceCullMode.Off);
//			mat.getAdditionalRenderState().setDepthTest(false);
//			mat.getAdditionalRenderState().setDepthWrite(false);
//			
//			quad.setMaterial(mat);
//			return quad;
//		}
	
	
	
	
	public static Geometry createFullScreenQuad() {
		Mesh m = new Mesh();

		m.setBuffer(VertexBuffer.Type.Position, 3,
				new float[]{-1f, -1f, 0,
					1f, -1f, 0,
					-1f, 1f, 0,
					1f, 1f, 0
				});
		m.setBuffer(VertexBuffer.Type.TexCoord, 2,
				new float[]{0, 0,
					1f, 0,
					0, 1f,
					1f, 1f});
		m.setBuffer(VertexBuffer.Type.Index, 3,
				new short[]{0, 1, 2, 1, 3, 2});

		m.setStatic();
//        m.setBuffer(VertexBuffer.Type.Normal, 3,
//                new float[] {1,0,0, 1,0,0, 1,0,0, 1,0,0});
//        m.getBuffer(VertexBuffer.Type.Normal).setUsage(VertexBuffer.Usage.Dynamic);
		m.updateBound();

		Geometry g = new Geometry("FSQuad", m);
		g.updateGeometricState();
		return g;
	}
	public static Geometry createFullScreenQuad(float z) {
		Mesh m = new Mesh();

		m.setBuffer(VertexBuffer.Type.Position, 3,
				new float[]{-1f, -1f, z,
					1f, -1f, z,
					-1f, 1f, z,
					1f, 1f, z
				});
		m.setBuffer(VertexBuffer.Type.TexCoord, 2,
				new float[]{0, 0,
					1f, 0,
					0, 1f,
					1f, 1f});
		m.setBuffer(VertexBuffer.Type.Index, 3,
				new short[]{0, 1, 2, 1, 3, 2});

		m.setStatic();
//        m.setBuffer(VertexBuffer.Type.Normal, 3,
//                new float[] {1,0,0, 1,0,0, 1,0,0, 1,0,0});
//        m.getBuffer(VertexBuffer.Type.Normal).setUsage(VertexBuffer.Usage.Dynamic);
		m.updateBound();

		Geometry g = new Geometry("FSQuad", m);
		g.updateGeometricState();
		return g;
	}

	public static Geometry createFullScreenQuad(float aspect, Matrix4f projInv) {
		Mesh m = new Mesh();

		m.setBuffer(VertexBuffer.Type.Position, 3,
				new float[]{-1f, -1f, 0,
					1f, -1f, 0,
					-1f, 1f, 0,
					1f, 1f, 0
				});

//		Vector4f a = projInv.mult(new Vector4f(aspect, 1, 1, 1));
		Vector4f a = projInv.mult(new Vector4f(1, 1, 1, 1));
//		System.out.println("FSQUAD (" + aspect + ", " + a + ")");
		m.setBuffer(VertexBuffer.Type.TexCoord, 2,
				new float[]{-a.x, -a.y,
					a.x, -a.y,
					-a.x, a.y,
					a.x, a.y});
		m.setBuffer(VertexBuffer.Type.Index, 3,
				new short[]{0, 1, 2, 1, 3, 2});

		m.setStatic();
//        m.setBuffer(VertexBuffer.Type.Normal, 3,
//                new float[] {1,0,0, 1,0,0, 1,0,0, 1,0,0});
//        m.getBuffer(VertexBuffer.Type.Normal).setUsage(VertexBuffer.Usage.Dynamic);
		m.updateBound();

		Geometry g = new Geometry("FSQuad", m);
		g.updateGeometricState();
		return g;
	}
		public static final double[] PHASE = {
		0.0011780425651461458, 0.0023683632839777272, 0.002369805448295656, 0.0023682882647087736, 0.002390327322462104, 0.0023953377697178264, 0.002399467265507336, 0.002409026018415378, 0.002411118731508356, 0.0024243757625759667, 0.0024237129969225126, 0.002467384137667317, 0.002502769944189043, 0.002584089304625141, 0.0026556097741370554, 0.002725451186423225, 0.002892166908685536, 0.003026950765017596, 0.0031782285525283342, 0.003335623560122769, 0.0034487980492216384, 0.0036544432362979346, 0.0038801073057501113, 0.00414088802862166, 0.004259940745120435, 0.004525555915843189, 0.004692996251705877, 0.004750923344216602, 0.005003709647282083, 0.005212836644703715, 0.00532281680187721, 0.005637859935515526, 0.00586474111147877, 0.006131528338973473, 0.0062954941182623795, 0.0064466779885203815, 0.006782726899243207, 0.006953541002432841, 0.007069942656317798, 0.007258263546261348, 0.007476366131535923, 0.007822710052979399, 0.007906452936669027, 0.00816750319442038, 0.008422044146646735, 0.008767752790413167, 0.008916475723227523, 0.009350139019513601, 0.009530825887564022, 0.00979939792463816, 0.010188533753358752, 0.010485516141162991, 0.010762335334715193, 0.01117311641774929, 0.01152932394139475, 0.01201695453447863, 0.01243084481306672, 0.01304035709355496, 0.013656235894801845, 0.014384137362580504, 0.01527579081427599, 0.01627638522492567, 0.0176065711625064, 0.019368837547064893, 0.022205097347728433, 0.026167466240661602, 0.035374536451397515, 0.09096672389031958, 0.0004983158280807611, 0.0004988217786465678, 0.0004944263748630314, 0.0005077831452894934, 0.0004993983103184701, 0.0005127604733514154, 0.0005018930827886336, 0.0004849364373403781, 0.0004877594429733049, 0.0005133859679812991, 0.0005011739572391015, 0.0005083169656091606, 0.0005006712995038024, 0.0005029556171545725, 0.0005228429294766961, 0.0005068938424415584, 0.0005421809594924213, 0.0005305695324014854, 0.0005445334721402239, 0.0005587461876099141, 0.000554312940136632, 0.0005781118964907751, 0.0005818679184896785, 0.0005922259224896024, 0.009903122276513554, 0.005548302581260168, 0.0043529589119613715, 0.003789152264249766, 0.003401835605079121, 0.003097411420327903, 0.002935941320230605, 0.0028168866948445797, 0.002685653941465057, 0.0026322585472875713, 0.0025478794314772743, 0.002698306046162911, 0.0021084169357234736, 0.0019721313577912626, 0.001877711876819563, 0.0018335533971596467, 0.001783751483231665, 0.001683429150214526, 0.0016775293523886878, 0.001583997694877304, 0.0015224447664781767, 0.001490723164478594, 0.0014901710188413198, 0.001386446189744113, 0.0013356015461554187, 0.0012913115441639269, 0.001219354607582133, 0.0011827452043326877, 0.0011662241669550494, 0.0011584839154864172, 0.0011151324179117478, 0.0010475433016927172, 0.0010092682988726454, 0.001005107115554774, 0.0009699454123962841, 0.0009619366759358364, 0.0009074489210291197, 0.0008691159834809881, 0.0008615469591987468, 0.0008619055436687968, 0.0008415083198398214, 0.0008028185158201655, 0.0007607712177373778, 0.0007350235738333245, 0.0007196617559608746, 0.0007219954660692576, 0.0006964470145498183, 0.0006790965656617369, 0.0006659563584938705, 0.0006709052441357567, 0.0006550487381322796, 0.0006129254186147314, 0.0006190108080035223, 0.0005919815849215087, 0.0005930927959123413, 0.0006120092481787424, 0.000584126132107295, 0.000593741960744134, 0.0005835035962526499, 0.0005792843827623561, 0.0005739278065258949, 0.0005831652937096388, 0.0005915428749091092, 0.0005821720996730828, 0.0005741694716518375, 0.0005759506066233147, 0.0005706804552571302, 0.0005797903333281628, 0.000578440034209176, 0.0005779535065711456, 0.0005785549969438514, 0.0005946552201270657, 0.0005837854911774018, 0.0005798516086089112, 0.0005935424343042513, 0.0005800732304187213, 0.0005889363370904153, 0.0005850321377186738, 0.0005884959568016715, 0.0005775545014135612, 0.0006017170530667875, 0.0005830522875843955, 0.0005717123997048761, 0.0005832506209697465, 0.0005767832155199029, 0.0005940422764308556, 0.0005789596810410067, 0.0005632325498709478, 0.000583011485119411, 0.0005937750799379343, 0.000576189885640194, 0.0005858842172652195, 0.0005744394360312724, 0.0005682312574700781, 0.0005868564135420174, 0.0005879923923449282, 0.0005898069328432932, 0.0006128970239168768, 0.0006005015213877025, 0.0006079664158704163, 0.000603012710288222, 0.0006086466478422148, 0.0005903216642904531, 0.0005891141022156399, 0.0005918633770785071, 0.0005916565491448902, 0.0005910357312887708, 0.0005947517620997714, 0.0005841915592178137, 0.0005940133090668257, 0.0005999104344505132, 0.0005991705497521293, 0.0005999081915079935, 0.0006001959562610415, 0.0006020614163268197, 0.0006096860846724198, 0.0005876654954032404, 0.000610333006561693, 0.000599305317192031, 0.0006206141301275937, 0.0006104200995425077, 0.0006126955408675619, 0.0006213498629962073, 0.0005991482157712958, 0.0006295667636113471, 0.000603511597971201, 0.0006373958737815007, 0.0006079923767370262, 0.0006345490070579398, 0.0006263116336270358, 0.000626939896143433, 0.0006236273086528746, 0.0006202013809818041, 0.0006271664810600949, 0.0006065028242930986, 0.0006104068804982964, 0.0006504329533156462, 0.0006567988059637509, 0.0006255446904518728, 0.000638667813078845, 0.0006565655399417115, 0.0006380672771497646, 0.000619360611592219, 0.000663779940694948, 0.0006544196166166195, 0.000652501996206715, 0.0006439694133624853, 0.0006486134974326107, 0.0006647758071736552, 0.0006582122415285558, 0.0006736957509632398, 0.0006625241314948724, 0.0006561337019234146, 0.0006573433160520223, 0.0006646716296519464, 0.000659201904123698, 0.0006545582018310227, 0.0006686387268585996, 0.0006736550916647991, 0.0006584725660273744, 0.0006726798888905813, 0.0006883320485138675, 0.0006854963965029046, 0.0006866785226551018, 0.0006733761077931047, 0.000713590444615558, 0.0007066598953965052, 0.0006795647679821602, 0.0006907437366664428, 0.0006892005444907695, 0.0006916505535549031, 0.0006951682032583715, 0.0007255447078567254, 0.0007151019015406878, 0.0007220417088629065, 0.0007188189822396764, 0.0007103091151537304, 0.000742277965774464, 0.0007364212133561295, 0.000730912880583235, 0.0007166072977487966, 0.0007259470535669985, 0.0007333476185493629, 0.0007348742988503173, 0.0007476081039225026, 0.0007444896502653438, 0.0007852926401937417, 0.000739280440124639, 0.0007557175819076076, 0.0007827806877383218, 0.0007643664637075883, 0.0007759531707086273, 0.0007724051696978724, 0.0007701688128392768, 0.0007789347094277274, 0.0007813685883945924, 0.000784466712402531, 0.0007557282239540304, 0.000773165479489839, 0.000790637476773611, 0.0007968355859545576, 0.0008207686416380646, 0.0008072495203509279, 0.0008191510505817939, 0.0008146514215543678, 0.0008278995762962629, 0.0008268054975685056, 0.0008481623190184243, 0.0008303673857340097, 0.0008335851969725692, 0.0008756804558475317, 0.0008727953636567748, 0.0008720790537159375, 0.000909369547936444, 0.0008946792288766206, 0.0009437152017952459, 0.0009549293417271231, 0.0009459672115292973, 0.0009740721402992798, 0.001040763506844291, 0.0010314437466200405, 0.0010672372914585226, 0.0011085739585400443, 0.001153971115136961, 0.0011901115047889012, 0.0011837926107671646, 0.00123231423401608, 0.0013119216089213588, 0.0012641747075631533, 0.0014135152608474855, 0.0013721759213238132, 0.0013730556320133132, 0.0015126345176748504, 0.0015324833181966904, 0.001640726578860743, 0.001626170931796459, 0.0017774555913012996, 0.001809264524892603, 0.001837182382712014, 0.001817925528126626, 0.001984221867859951, 0.0020536389345102825, 0.002011872672352984, 0.002256330691232246, 0.002221503616008809, 0.0023796303000864502, 0.002336215904676869, 0.002608680926410151, 0.002558010659671811, 0.002849201292668602, 0.00272521620240266, 0.002781118538206532, 0.002795350628881817, 0.0031359363919334585, 0.0031694873760297806, 0.003226878834777949, 0.003364787921316908, 0.0034730328999794864, 0.0036453011934767274, 0.0038211914096435077, 0.004042101968063911, 0.00436484058976483, 0.0040976456239533695, 0.004272563071177178, 0.0043188051012712685, 0.0046361518800437694, 0.005051484132061063, 0.005129511425544548, 0.005378117265530925, 0.005645545879141876, 0.005504844090555095, 0.005777889032235149, 0.005804953235676032, 0.006143043510424792, 0.006219114576253727, 0.0065796251135397865, 0.006709418756820983, 0.006626736450887861, 0.007156103718376654, 0.007077619437285343, 0.007293539019099981, 0.007795166337061132, 0.00790458528138291, 0.007764160663224936, 0.008344451697678966, 0.008549001947028243, 0.008558750252440283, 0.009105870171360888, 0.00941697221638134, 0.00982361406830095, 0.010014791417126495, 0.010419586229742296, 0.010561718920212225, 0.010919005346931798, 0.011242275402843322, 0.01146961547530164, 0.011589844066346867, 0.012264818199101924, 0.012588184462930883, 0.012773958897281957, 0.012787958676378827, 0.013954654529373533, 0.013835506368512222, 0.014554367346271413, 0.014539977390620492, 0.014791354934894934, 0.016000347911591366, 0.015446514054432488, 0.016525119342135297, 0.016466162214064075, 0.01673848865058296, 0.017564125145599116, 0.017809094937150296, 0.018246485144904703, 0.018118330090439536, 0.01962525302657147, 0.019708268242441117, 0.02046312930663932, 0.021049718141910968, 0.021692794768706284, 0.021633570396419964, 0.022830375509797923, 0.022797567082842134, 0.02339961026929571, 0.02397575672775095, 0.024821080722316258, 0.02566158668546072, 0.026747920675864293, 0.027548428579111814, 0.027193348062499186, 0.028669641757360767, 0.02852512524849212, 0.029693184046983852, 0.03024811436897955, 0.030915314749294726, 0.03157766502888324, 0.032535245337779815, 0.03372923751490509, 0.034034097498615655, 0.03514840508634636, 0.03689712600697366, 0.03641414393612276, 0.03840948087266628, 0.03851070076446871, 0.03974153599264292, 0.04061172286187157, 0.04228305902046399, 0.043347240756100254, 0.04484207050972135, 0.04453449837900495, 0.046694668493204104, 0.05244384595230099, 0.05185978753796892, 0.05065934179482636, 0.051849488709473764, 0.053399486831750824, 0.05453156386912115, 0.05509339367319589, 0.05649306310670328, 0.05772848271849885, 0.059234921560824, 0.06034693848385382, 0.06275966812531308, 0.06412783022941478, 0.06554909299550245, 0.06665197780192476, 0.06876193043744146, 0.07057515953026511, 0.07224783343704283, 0.07441366607438256, 0.07622421356239638, 0.07809461153771476, 0.08034113054847825, 0.08305791385967334, 0.08424540054904812, 0.08685883517737877, 0.08902777090183328, 0.09180849124615932, 0.09449979014900224, 0.09690712603864582, 0.09956561040609375, 0.10265646231716195, 0.10610036368880803, 0.10856318864016569, 0.11252875071969189, 0.11557230498601635, 0.11804607626042463, 0.12194691331816278, 0.12650597135058866, 0.1297378487975214, 0.13342278918009193, 0.13866707970535833, 0.1425786553992142, 0.14664402937530668, 0.1514530569567709, 0.15712061345124603, 0.1617707849628141, 0.16787122210980254, 0.17333401150533675, 0.17954537790823977, 0.18529246628112944, 0.19171076217045102, 0.1975707344998, 0.2057393181244043, 0.21445073430716408, 0.2214676205876801, 0.22961058541826979, 0.23846704038144997, 0.24822712897271126, 0.25900688710314135, 0.2688295505455914, 0.2800672461461428, 0.2931819918123039, 0.3050959893675819, 0.3182933211317587, 0.33276252767289066, 0.349350434134477, 0.36520650071210903, 0.3837716845097372, 0.20410878023124435
	};
	public static final double[] PHASE_495 = {
		1.0881611E-4, 2.1802021E-4, 2.1843537E-4, 2.1955515E-4, 2.196877E-4, 2.207744E-4, 2.2267342E-4, 2.2518628E-4, 2.315026E-4, 2.3857526E-4, 2.4932795E-4, 2.6224495E-4, 2.7581397E-4, 2.9077684E-4, 3.0811044E-4, 3.2413477E-4, 3.4192108E-4, 3.6038307E-4, 3.78717E-4, 3.9740372E-4, 4.1665477E-4, 4.3447857E-4, 4.5404697E-4, 4.7327907E-4, 4.929139E-4, 5.1128917E-4, 5.291962E-4, 5.496517E-4, 5.67796E-4, 5.8667606E-4, 6.052415E-4, 6.252272E-4, 6.4256386E-4, 6.6289335E-4, 6.8334606E-4, 7.011129E-4, 7.226272E-4, 7.4198E-4, 7.6223584E-4, 7.8448514E-4, 8.066225E-4, 8.3169964E-4, 8.5337675E-4, 8.7876763E-4, 9.0759975E-4, 9.349574E-4, 9.693683E-4, 0.0010020598, 0.0010423982, 0.0010827942, 0.0011347284, 0.0011914979, 0.001258595, 0.0013459655, 0.0014564594, 0.0016115528, 0.0019061638, 0.002234252, 0.0023796, 0.0023435496, 0.00212497, 0.0017472076, 9.1528735E-4, 6.608959E-5, 5.4639553E-5, 5.3818057E-5, 5.4436394E-5, 5.4593773E-5, 5.5156845E-5, 5.508435E-5, 5.373002E-5, 5.5517445E-5, 5.3931006E-5, 5.386018E-5, 5.202567E-5, 5.3572705E-5, 5.1466362E-5, 5.1166593E-5, 5.057434E-5, 4.982266E-5, 4.86335E-5, 4.71815E-5, 4.398874E-5, 4.3205942E-5, 4.3385553E-5, 4.3664382E-5, 4.394394E-5, 4.4224354E-5, 4.450555E-5, 4.2916075E-5, 4.317581E-5, 4.5330533E-5, 4.3709068E-5, 4.3971235E-5, 4.2305797E-5, 4.448659E-5, 4.4751218E-5, 4.305431E-5, 4.3298078E-5, 4.552734E-5, 4.37992E-5, 4.6103567E-5, 8.946009E-5, 1.491652E-4, 1.8691979E-4, 2.1074389E-4, 2.2453879E-4, 2.3910795E-4, 2.4672577E-4, 2.5505704E-4, 2.5974907E-4, 2.6031022E-4, 2.5627876E-4, 2.5048305E-4, 2.4256972E-4, 2.3231292E-4, 2.2037784E-4, 1.9955586E-4, 1.8846293E-4, 1.7804772E-4, 1.7095699E-4, 1.6375107E-4, 1.5821449E-4, 1.5257853E-4, 1.4726096E-4, 1.4401246E-4, 1.3645427E-4, 1.3466795E-4, 1.3071569E-4, 1.2457538E-4, 1.2431943E-4, 1.18001626E-4, 1.1491803E-4, 1.1195297E-4, 1.0882151E-4, 1.0571327E-4, 1.03008984E-4, 1.00599296E-4, 9.807354E-5, 9.528156E-5, 9.275342E-5, 8.804372E-5, 8.891252E-5, 8.3864E-5, 8.426606E-5, 7.9555335E-5, 7.810302E-5, 7.853633E-5, 7.431614E-5, 7.238325E-5, 7.121068E-5, 6.946342E-5, 6.8064954E-5, 6.663326E-5, 6.524725E-5, 6.168348E-5, 6.327195E-5, 6.214426E-5, 5.8291516E-5, 6.03185E-5, 5.6754972E-5, 5.8810958E-5, 5.5323813E-5, 5.755188E-5, 5.4227672E-5, 5.3816122E-5, 5.337413E-5, 5.3102398E-5, 5.2823834E-5, 5.2606054E-5, 5.2425126E-5, 5.2346513E-5, 5.2282056E-5, 5.2250034E-5, 5.2234347E-5, 4.94346E-5, 5.2327578E-5, 5.243845E-5, 4.9627743E-5, 5.2666648E-5, 4.986619E-5, 5.2942243E-5, 5.0137318E-5, 5.029057E-5, 5.343072E-5, 5.0623865E-5, 5.077946E-5, 5.0944684E-5, 5.4165503E-5, 5.1300445E-5, 5.150202E-5, 5.166042E-5, 5.1865634E-5, 5.2035E-5, 4.912098E-5, 5.24119E-5, 5.2600128E-5, 5.280729E-5, 5.3013937E-5, 5.001943E-5, 5.3399493E-5, 5.362244E-5, 5.0590563E-5, 5.4031367E-5, 5.098725E-5, 5.445478E-5, 5.1390838E-5, 5.157235E-5, 5.5121294E-5, 5.199533E-5, 5.2206662E-5, 5.2419236E-5, 5.6011584E-5, 5.2849613E-5, 5.3082924E-5, 5.328471E-5, 5.350956E-5, 5.373681E-5, 5.3964108E-5, 5.4193926E-5, 5.4430162E-5, 5.4663447E-5, 5.4901502E-5, 5.1576815E-5, 5.536413E-5, 5.5619897E-5, 5.5871875E-5, 5.247634E-5, 5.636607E-5, 5.6618395E-5, 5.3196374E-5, 5.7128353E-5, 5.3676482E-5, 5.7652614E-5, 5.416664E-5, 5.8189893E-5, 5.4671153E-5, 5.4916043E-5, 5.901062E-5, 5.5439083E-5, 5.569242E-5, 5.9859336E-5, 5.623605E-5, 5.649843E-5, 5.6763434E-5, 5.7048277E-5, 5.7319867E-5, 5.7599736E-5, 6.1927094E-5, 5.8186473E-5, 5.847625E-5, 5.4651002E-5, 5.9046375E-5, 5.9344904E-5, 5.9647824E-5, 5.9954724E-5, 6.0260903E-5, 6.0575774E-5, 5.6632598E-5, 6.119973E-5, 6.1524785E-5, 6.185184E-5, 5.7819325E-5, 6.250554E-5, 6.284573E-5, 5.8756435E-5, 6.3517655E-5, 5.9381677E-5, 6.421099E-5, 6.0033628E-5, 6.491612E-5, 6.069637E-5, 6.563672E-5, 6.137606E-5, 6.1713035E-5, 6.674816E-5, 6.2420164E-5, 6.276384E-5, 6.310926E-5, 6.8280715E-5, 6.385777E-5, 6.4224056E-5, 6.4592066E-5, 6.499881E-5, 7.036331E-5, 6.585637E-5, 6.627643E-5, 6.6807166E-5, 6.732404E-5, 6.786957E-5, 6.840052E-5, 6.915369E-5, 7.000022E-5, 7.067501E-5, 7.154301E-5, 6.729035E-5, 7.353763E-5, 7.486727E-5, 7.585978E-5, 7.7195626E-5, 7.88915E-5, 7.471269E-5, 8.173078E-5, 8.3792555E-5, 8.01049E-5, 8.740526E-5, 8.988217E-5, 8.610736E-5, 9.4499475E-5, 9.707447E-5, 9.3739465E-5, 1.024659E-4, 9.960467E-5, 1.08591456E-4, 1.0629416E-4, 1.1542615E-4, 1.1307064E-4, 1.1656473E-4, 1.2747583E-4, 1.2489106E-4, 1.3535339E-4, 1.3379E-4, 1.388471E-4, 1.5015161E-4, 1.484769E-4, 1.5422828E-4, 1.583179E-4, 1.7119922E-4, 1.725528E-4, 1.7611221E-4, 1.8400901E-4, 1.8918945E-4, 2.0356626E-4, 2.0534526E-4, 2.1123748E-4, 2.1751483E-4, 2.2668844E-4, 2.345306E-4, 2.422519E-4, 2.5204595E-4, 2.5865532E-4, 2.697601E-4, 2.7862392E-4, 2.8611318E-4, 2.993421E-4, 3.0553518E-4, 3.1902365E-4, 3.2058428E-4, 3.3995192E-4, 3.5104647E-4, 3.627138E-4, 3.7225144E-4, 3.8561077E-4, 3.906878E-4, 4.1222377E-4, 4.2450713E-4, 4.3719832E-4, 4.4324866E-4, 4.6649837E-4, 4.780268E-4, 4.861553E-4, 5.1099295E-4, 5.2183744E-4, 5.346513E-4, 5.574703E-4, 5.650068E-4, 5.883811E-4, 5.9932785E-4, 6.247087E-4, 6.3671276E-4, 6.600914E-4, 6.725605E-4, 7.002016E-4, 7.0844736E-4, 7.417098E-4, 7.4928836E-4, 7.860155E-4, 7.884069E-4, 8.210493E-4, 8.426566E-4, 8.6102454E-4, 8.8325946E-4, 9.1897434E-4, 9.34514E-4, 9.5561147E-4, 9.938158E-4, 0.0010093285, 0.0010371947, 0.0010612467, 0.0011038639, 0.0011210482, 0.0011491327, 0.001179011, 0.0012066305, 0.0012445449, 0.0012769697, 0.0013063578, 0.0013390172, 0.0013707689, 0.0014060027, 0.0014376802, 0.0014800212, 0.0015152184, 0.0015520533, 0.0015920511, 0.001636449, 0.0016725678, 0.001714794, 0.0017559059, 0.0017991167, 0.0018428845, 0.0018894329, 0.0019278129, 0.0019765345, 0.0020132498, 0.0020669526, 0.002124938, 0.002169341, 0.0022174052, 0.0022720648, 0.0023102958, 0.0023763117, 0.002433328, 0.0024854024, 0.0025244157, 0.002605044, 0.0026575623, 0.0027184938, 0.0027612345, 0.0028366593, 0.0029047402, 0.0029548493, 0.0030444055, 0.0031133727, 0.0031706751, 0.0032577342, 0.0033207054, 0.003417851, 0.003481917, 0.003567419, 0.0036704468, 0.0037311148, 0.0038466915, 0.0039044195, 0.004026314, 0.004102377, 0.004209329, 0.004300107, 0.0044267317, 0.0045141303, 0.004617141, 0.0047504003, 0.0048410282, 0.0049908767, 0.00508502, 0.0052239466, 0.0054066665, 0.0055277976, 0.005663368, 0.0058447984, 0.0059646307, 0.0061144833, 0.006318781, 0.0064295838, 0.006602328, 0.00677445, 0.0069745868, 0.007127575, 0.0072975927, 0.0074977046, 0.0077079455, 0.007891795, 0.008077506, 0.008300656, 0.008532856, 0.008745626, 0.009034518, 0.0092483265, 0.009495265, 0.009768257, 0.010050997, 0.010337814, 0.01063914, 0.010955868, 0.011282527, 0.011611697, 0.011975323, 0.012347203, 0.012732226, 0.013135099, 0.01356451, 0.013985168, 0.014457654, 0.014936239, 0.015446528, 0.015968291, 0.016523834, 0.01710516, 0.017716365, 0.018359115, 0.019041508, 0.01975269, 0.020415915, 0.02129606, 0.02215051, 0.023031227, 0.023989102, 0.025005676, 0.026090885, 0.027124412, 0.028546894, 0.01483625
	},
	PHASE_615 = { 
		1.0139949E-4, 2.0313064E-4, 2.034627E-4, 2.0446703E-4, 2.044983E-4, 2.0540426E-4, 2.0634505E-4, 2.0663493E-4, 2.089393E-4, 2.1109231E-4, 2.1659625E-4, 2.2377413E-4, 2.32469E-4, 2.426981E-4, 2.5553425E-4, 2.679845E-4, 2.8166233E-4, 2.9745523E-4, 3.124724E-4, 3.2821164E-4, 3.451556E-4, 3.617765E-4, 3.79E-4, 3.961311E-4, 4.1472167E-4, 4.306887E-4, 4.4823354E-4, 4.6674281E-4, 4.8468835E-4, 5.01682E-4, 5.1910983E-4, 5.3751416E-4, 5.5532536E-4, 5.71735E-4, 5.923505E-4, 6.092339E-4, 6.281576E-4, 6.4481713E-4, 6.650861E-4, 6.8335E-4, 7.0356444E-4, 7.246759E-4, 7.43883E-4, 7.653152E-4, 7.867152E-4, 8.107919E-4, 8.3603634E-4, 8.5923984E-4, 8.89156E-4, 9.166109E-4, 9.51962E-4, 9.860432E-4, 0.0010244057, 0.0010713901, 0.001122576, 0.0011831189, 0.0012554514, 0.0013487696, 0.0014711003, 0.0016436744, 0.0019787461, 0.002375155, 0.0025338125, 0.002360802, 0.0019786782, 0.001042625, 1.01622165E-4, 4.4678134E-5, 4.559607E-5, 4.6499084E-5, 4.592305E-5, 4.8702346E-5, 4.8450496E-5, 4.9596256E-5, 4.91278E-5, 5.1787865E-5, 5.1080915E-5, 5.2131647E-5, 5.288116E-5, 5.3602434E-5, 5.4076612E-5, 5.4477685E-5, 5.298085E-5, 5.3174765E-5, 5.33481E-5, 5.3371754E-5, 5.334035E-5, 5.327659E-5, 5.310536E-5, 5.0972678E-5, 5.0523486E-5, 5.1710114E-5, 4.893522E-5, 4.7788337E-5, 4.5151286E-5, 7.832877E-5, 1.3806444E-4, 1.9366255E-4, 2.3089825E-4, 2.551415E-4, 2.6790018E-4, 2.7786163E-4, 2.851664E-4, 2.8601725E-4, 2.8067167E-4, 2.666754E-4, 2.4795192E-4, 2.299384E-4, 2.0844491E-4, 1.9504833E-4, 1.8500566E-4, 1.7646425E-4, 1.6847528E-4, 1.629782E-4, 1.5629397E-4, 1.4898714E-4, 1.4552238E-4, 1.395348E-4, 1.364991E-4, 1.3050117E-4, 1.2672742E-4, 1.2271124E-4, 1.1869358E-4, 1.1549558E-4, 1.12525566E-4, 1.0912354E-4, 1.0380416E-4, 1.02799764E-4, 1.0004405E-4, 9.526794E-5, 9.4736155E-5, 8.98633E-5, 8.7368266E-5, 8.4995234E-5, 8.263603E-5, 8.069227E-5, 7.823667E-5, 7.6348544E-5, 7.451186E-5, 7.254626E-5, 7.0923816E-5, 6.7050714E-5, 6.758486E-5, 6.3915155E-5, 6.48731E-5, 6.097414E-5, 5.982644E-5, 6.1211496E-5, 5.7561334E-5, 5.674318E-5, 5.585535E-5, 5.486746E-5, 5.4243257E-5, 5.3632644E-5, 5.3008695E-5, 5.0006773E-5, 5.202356E-5, 5.1801773E-5, 4.8864807E-5, 5.1182626E-5, 4.8485996E-5, 5.0910206E-5, 4.824402E-5, 5.0807415E-5, 4.819366E-5, 4.8232592E-5, 4.8277587E-5, 4.835452E-5, 4.8454498E-5, 4.8580805E-5, 4.8699494E-5, 4.8826416E-5, 4.8978436E-5, 4.9139046E-5, 4.9276277E-5, 4.6702196E-5, 4.959669E-5, 4.977624E-5, 4.7156755E-5, 5.0099796E-5, 4.7479254E-5, 5.0457358E-5, 4.7795747E-5, 4.7959937E-5, 5.098892E-5, 4.830358E-5, 4.847707E-5, 4.8644528E-5, 5.1743456E-5, 4.9014663E-5, 4.9196824E-5, 4.9377173E-5, 4.9566297E-5, 4.974878E-5, 4.694463E-5, 5.0126495E-5, 5.0318344E-5, 5.051045E-5, 5.0724855E-5, 4.7855447E-5, 5.1115778E-5, 5.1326846E-5, 4.8423102E-5, 5.174118E-5, 4.8812737E-5, 5.216087E-5, 4.9215072E-5, 4.940498E-5, 5.2811447E-5, 4.982281E-5, 5.0024762E-5, 5.0232822E-5, 5.369958E-5, 5.0664585E-5, 5.0884693E-5, 5.1096355E-5, 5.131378E-5, 5.153368E-5, 5.1761224E-5, 5.1989395E-5, 5.22184E-5, 5.24467E-5, 5.268337E-5, 4.9486494E-5, 5.3141026E-5, 5.3388445E-5, 5.363479E-5, 5.0377213E-5, 5.4117543E-5, 5.437452E-5, 5.107446E-5, 5.4871864E-5, 5.154683E-5, 5.538862E-5, 5.2026462E-5, 5.591397E-5, 5.2523043E-5, 5.2766987E-5, 5.6713143E-5, 5.3279353E-5, 5.3527885E-5, 5.754448E-5, 5.4058928E-5, 5.43173E-5, 5.4582833E-5, 5.485391E-5, 5.512179E-5, 5.5392946E-5, 5.957042E-5, 5.596938E-5, 5.6252116E-5, 5.2573476E-5, 5.681196E-5, 5.710312E-5, 5.7401543E-5, 5.7700556E-5, 5.800388E-5, 5.8310085E-5, 5.4508524E-5, 5.8917783E-5, 5.923579E-5, 5.955913E-5, 5.5674613E-5, 6.0196766E-5, 6.0529415E-5, 5.6588648E-5, 6.118839E-5, 5.7203386E-5, 6.186305E-5, 5.7840818E-5, 6.255618E-5, 5.8488884E-5, 6.3263775E-5, 5.9155755E-5, 5.9480462E-5, 6.434891E-5, 6.0173155E-5, 6.0511717E-5, 6.085346E-5, 6.584784E-5, 6.158403E-5, 6.19399E-5, 6.230082E-5, 6.266574E-5, 6.78267E-5, 6.344098E-5, 6.382322E-5, 6.4234395E-5, 6.4677486E-5, 6.512502E-5, 6.5568485E-5, 6.612233E-5, 6.663636E-5, 6.7131674E-5, 6.7866415E-5, 6.3617976E-5, 6.9274305E-5, 7.0260736E-5, 7.126377E-5, 7.2046845E-5, 7.3508854E-5, 6.907025E-5, 7.580013E-5, 7.723121E-5, 7.333096E-5, 8.036519E-5, 8.216903E-5, 7.8322315E-5, 8.6025895E-5, 8.806054E-5, 8.458901E-5, 9.274634E-5, 8.967506E-5, 9.792805E-5, 9.514654E-5, 1.0370305E-4, 1.010082E-4, 1.043674E-4, 1.13774935E-4, 1.1147457E-4, 1.2109683E-4, 1.19383716E-4, 1.2320682E-4, 1.3424274E-4, 1.320885E-4, 1.3728566E-4, 1.4197033E-4, 1.5304421E-4, 1.527626E-4, 1.5774248E-4, 1.6375213E-4, 1.6958556E-4, 1.8241596E-4, 1.824855E-4, 1.8971792E-4, 1.9495796E-4, 2.0302812E-4, 2.1016583E-4, 2.1793167E-4, 2.2576046E-4, 2.3347021E-4, 2.4304641E-4, 2.5079813E-4, 2.5959124E-4, 2.6913633E-4, 2.7773954E-4, 2.889033E-4, 2.9058012E-4, 3.081373E-4, 3.193326E-4, 3.2920827E-4, 3.3981388E-4, 3.5364655E-4, 3.5539185E-4, 3.765118E-4, 3.88232E-4, 4.0136217E-4, 4.064624E-4, 4.2743064E-4, 4.406876E-4, 4.470518E-4, 4.701654E-4, 4.841003E-4, 4.913869E-4, 5.1548146E-4, 5.228461E-4, 5.4585503E-4, 5.5528234E-4, 5.7962345E-4, 5.918054E-4, 6.15558E-4, 6.2438636E-4, 6.525214E-4, 6.621802E-4, 6.909782E-4, 7.010706E-4, 7.317048E-4, 7.415767E-4, 7.654362E-4, 7.941258E-4, 8.094145E-4, 8.2807586E-4, 8.6407614E-4, 8.768877E-4, 9.020448E-4, 9.371997E-4, 9.4997E-4, 9.77559E-4, 0.0010017368, 0.0010421018, 0.0010592744, 0.0010841741, 0.0011141062, 0.0011419738, 0.0011750318, 0.0012135513, 0.0012375559, 0.0012661302, 0.0013009289, 0.0013330479, 0.0013653715, 0.0014061526, 0.0014380695, 0.0014718095, 0.0015122404, 0.0015536996, 0.0015895563, 0.0016293438, 0.0016720057, 0.0017133275, 0.0017528172, 0.0017991285, 0.001842878, 0.0018902533, 0.0019242081, 0.00198406, 0.0020331861, 0.0020815528, 0.002139977, 0.0021888257, 0.002227659, 0.0023016916, 0.0023520316, 0.002415243, 0.0024568914, 0.002533008, 0.0025916763, 0.0026567418, 0.0027006003, 0.0027846473, 0.0028504562, 0.0028977776, 0.0029826136, 0.003059564, 0.0031066323, 0.0031955338, 0.003255251, 0.003347596, 0.0034015249, 0.0035000974, 0.0035842967, 0.0036481682, 0.0037585404, 0.0038250631, 0.0039416393, 0.0040177195, 0.004136697, 0.0042271493, 0.0043676132, 0.004473718, 0.004593878, 0.004741261, 0.0048385668, 0.0049916147, 0.0050820634, 0.0052190945, 0.0053838966, 0.0054777316, 0.005615664, 0.005783235, 0.00589157, 0.0060405, 0.006219061, 0.0063384417, 0.0065083453, 0.0066723675, 0.0068716197, 0.0070267143, 0.0072069457, 0.007403563, 0.007636808, 0.0078077884, 0.008017668, 0.008240177, 0.00847194, 0.008706638, 0.008995069, 0.009207784, 0.009480538, 0.009755224, 0.010044369, 0.010345663, 0.01065041, 0.010984905, 0.011316421, 0.011671322, 0.012038424, 0.012428025, 0.012823909, 0.013243779, 0.013678079, 0.014139102, 0.014618378, 0.01511912, 0.015645528, 0.016195394, 0.016779877, 0.017388554, 0.018029336, 0.018708905, 0.019419624, 0.020174304, 0.020877965, 0.021808524, 0.0227033, 0.023653954, 0.024669476, 0.025747545, 0.02691003, 0.028024862, 0.029537046, 0.0153678125
	},
	PHASE_780 = { 
		9.8380966E-5, 1.9707925E-4, 1.9737461E-4, 1.9835243E-4, 1.9835112E-4, 1.9920681E-4, 2.0037184E-4, 2.0091367E-4, 2.0320006E-4, 2.0463069E-4, 2.084421E-4, 2.1374629E-4, 2.2028574E-4, 2.2842003E-4, 2.3922735E-4, 2.495075E-4, 2.6162752E-4, 2.7524738E-4, 2.890204E-4, 3.0310015E-4, 3.1909338E-4, 3.3400636E-4, 3.5038637E-4, 3.666646E-4, 3.8361258E-4, 3.995942E-4, 4.1579353E-4, 4.339301E-4, 4.5040486E-4, 4.6752373E-4, 4.8433442E-4, 5.0217507E-4, 5.1930366E-4, 5.3595303E-4, 5.547122E-4, 5.717359E-4, 5.894112E-4, 6.071378E-4, 6.256774E-4, 6.435684E-4, 6.6323933E-4, 6.8276486E-4, 7.0236146E-4, 7.226721E-4, 7.4265385E-4, 7.6607E-4, 7.896869E-4, 8.12649E-4, 8.3877466E-4, 8.6665904E-4, 8.9885853E-4, 9.310121E-4, 9.685172E-4, 0.001013014, 0.0010649373, 0.001132932, 0.0012492739, 0.0013501904, 0.0013446424, 0.0012772479, 0.0012573267, 0.001376434, 0.001568746, 0.0019475808, 0.0023344029, 0.0023824107, 0.00209429, 0.0011819298, 6.324364E-5, 4.2093834E-5, 4.0831466E-5, 4.2744618E-5, 4.1669795E-5, 4.2181473E-5, 4.1146403E-5, 4.332359E-5, 4.234065E-5, 4.3033666E-5, 4.371515E-5, 4.45218E-5, 4.5344965E-5, 4.622124E-5, 4.5550332E-5, 4.658844E-5, 4.7780002E-5, 4.8882597E-5, 4.9910454E-5, 5.093982E-5, 5.1921917E-5, 5.0995448E-5, 5.167487E-5, 9.303359E-5, 1.7773728E-4, 2.378817E-4, 2.6604134E-4, 2.8437068E-4, 2.9362264E-4, 2.9622513E-4, 2.8853543E-4, 2.7387321E-4, 2.5092455E-4, 2.2705684E-4, 2.0619601E-4, 1.8991079E-4, 1.807475E-4, 1.69528E-4, 1.5928384E-4, 1.5437772E-4, 1.493745E-4, 1.5021817E-4, 1.511443E-4, 1.5232494E-4, 1.5217002E-4, 1.5098242E-4, 1.4914759E-4, 1.446966E-4, 1.4070324E-4, 1.2988971E-4, 1.2617606E-4, 1.19370845E-4, 1.1482342E-4, 1.11304485E-4, 1.0731183E-4, 1.04376624E-4, 1.00852834E-4, 9.792892E-5, 9.288045E-5, 9.230197E-5, 8.964345E-5, 8.486741E-5, 8.48777E-5, 8.029555E-5, 7.803424E-5, 7.603778E-5, 7.413075E-5, 7.1964474E-5, 7.0612856E-5, 6.858035E-5, 6.7075234E-5, 6.5622095E-5, 6.4322376E-5, 6.0519218E-5, 6.176321E-5, 5.819981E-5, 5.949844E-5, 5.6151926E-5, 5.5406475E-5, 5.6916855E-5, 5.378499E-5, 5.3136628E-5, 5.2584226E-5, 5.2087613E-5, 5.16286E-5, 5.1277948E-5, 5.094685E-5, 4.8266986E-5, 5.0611776E-5, 5.037001E-5, 4.7723097E-5, 5.020495E-5, 4.761828E-5, 5.0129784E-5, 4.758966E-5, 5.0150433E-5, 4.7601123E-5, 4.764664E-5, 4.768669E-5, 4.7743582E-5, 4.7817914E-5, 4.7884063E-5, 4.797078E-5, 4.8084486E-5, 4.81809E-5, 4.8302074E-5, 4.841688E-5, 4.585917E-5, 4.8677342E-5, 4.8831636E-5, 4.624637E-5, 4.9135913E-5, 4.6542227E-5, 4.9468807E-5, 4.6851346E-5, 4.7016078E-5, 4.999178E-5, 4.7354242E-5, 4.7526148E-5, 4.7691425E-5, 5.0739658E-5, 4.805879E-5, 4.8242076E-5, 4.842217E-5, 4.8614562E-5, 4.8794638E-5, 4.604317E-5, 4.9163726E-5, 4.9362225E-5, 4.95588E-5, 4.9762577E-5, 4.6945806E-5, 5.0155028E-5, 5.036148E-5, 4.7517828E-5, 5.0772225E-5, 4.7903108E-5, 5.118968E-5, 4.830128E-5, 4.8493E-5, 5.1831998E-5, 4.8904316E-5, 4.9103626E-5, 4.93085E-5, 5.2722393E-5, 4.974039E-5, 4.9950846E-5, 5.016515E-5, 5.0384366E-5, 5.0603772E-5, 5.0824347E-5, 5.104571E-5, 5.12791E-5, 5.150709E-5, 5.173967E-5, 4.859857E-5, 5.2194715E-5, 5.2438965E-5, 5.2682346E-5, 4.94821E-5, 5.3161224E-5, 5.341226E-5, 5.0172046E-5, 5.3908178E-5, 5.0639464E-5, 5.44162E-5, 5.1117153E-5, 5.4937875E-5, 5.1607152E-5, 5.1845327E-5, 5.5729255E-5, 5.2355415E-5, 5.26014E-5, 5.655347E-5, 5.312664E-5, 5.3383967E-5, 5.3648357E-5, 5.3911575E-5, 5.4177453E-5, 5.4447897E-5, 5.8558537E-5, 5.5018125E-5, 5.5300396E-5, 5.168331E-5, 5.584959E-5, 5.6140027E-5, 5.643459E-5, 5.6731405E-5, 5.703148E-5, 5.7339792E-5, 5.3593652E-5, 5.7935777E-5, 5.825218E-5, 5.857276E-5, 5.4753025E-5, 5.920088E-5, 5.9531194E-5, 5.5655604E-5, 6.0184775E-5, 5.626617E-5, 6.085203E-5, 5.6893972E-5, 6.153954E-5, 5.7535235E-5, 6.224008E-5, 5.8196994E-5, 5.85195E-5, 6.331204E-5, 5.9204907E-5, 5.95398E-5, 5.987862E-5, 6.479825E-5, 6.0601524E-5, 6.09528E-5, 6.131134E-5, 6.1687344E-5, 6.677845E-5, 6.246444E-5, 6.2838655E-5, 6.325147E-5, 6.3654814E-5, 6.408361E-5, 6.4533815E-5, 6.5054766E-5, 6.555367E-5, 6.6098015E-5, 6.666199E-5, 6.212387E-5, 6.7969115E-5, 6.891104E-5, 6.9471396E-5, 7.044372E-5, 7.170658E-5, 6.71395E-5, 7.38543E-5, 7.486826E-5, 7.104381E-5, 7.793831E-5, 7.928653E-5, 7.553515E-5, 8.320464E-5, 8.4882595E-5, 8.13633E-5, 8.90616E-5, 8.589865E-5, 9.405573E-5, 9.0986694E-5, 9.9559584E-5, 9.6157586E-5, 9.963738E-5, 1.0879447E-4, 1.0656053E-4, 1.1541679E-4, 1.13706614E-4, 1.1739395E-4, 1.2788808E-4, 1.2577606E-4, 1.3057637E-4, 1.349168E-4, 1.458829E-4, 1.4514846E-4, 1.5016519E-4, 1.5599339E-4, 1.6129695E-4, 1.740467E-4, 1.7382289E-4, 1.800072E-4, 1.8655855E-4, 1.933968E-4, 2.0027856E-4, 2.0792862E-4, 2.1504582E-4, 2.2370792E-4, 2.3132327E-4, 2.3922614E-4, 2.4799586E-4, 2.5756916E-4, 2.6591145E-4, 2.7609663E-4, 2.7748905E-4, 2.9510842E-4, 3.0580218E-4, 3.1528782E-4, 3.2751253E-4, 3.3783002E-4, 3.4196186E-4, 3.6095525E-4, 3.7304068E-4, 3.8600518E-4, 3.9046918E-4, 4.1158422E-4, 4.2419106E-4, 4.3095078E-4, 4.5302592E-4, 4.6586015E-4, 4.745041E-4, 4.9569044E-4, 5.057042E-4, 5.272718E-4, 5.3622865E-4, 5.6157E-4, 5.6959805E-4, 5.9652637E-4, 6.038094E-4, 6.328665E-4, 6.412257E-4, 6.703933E-4, 6.7786843E-4, 7.116401E-4, 7.2062644E-4, 7.406322E-4, 7.7383104E-4, 7.845948E-4, 8.0503186E-4, 8.406385E-4, 8.53081E-4, 8.775846E-4, 9.121822E-4, 9.267919E-4, 9.5153885E-4, 9.771712E-4, 0.0010153598, 0.001032584, 0.0010591476, 0.0010880282, 0.001116145, 0.0011483411, 0.0011870188, 0.0012099213, 0.0012376789, 0.0012744596, 0.0013037646, 0.0013381757, 0.0013748892, 0.0014088254, 0.00144502, 0.0014825924, 0.001519546, 0.0015596132, 0.0015972304, 0.0016396818, 0.0016784867, 0.0017209456, 0.0017632224, 0.0018069175, 0.0018509809, 0.0018837053, 0.0019431235, 0.00199215, 0.0020410703, 0.0020907295, 0.002146063, 0.0021771071, 0.0022526775, 0.0023032788, 0.0023655328, 0.0024036707, 0.002481316, 0.0025429283, 0.002605947, 0.0026504744, 0.0027383137, 0.0028028514, 0.0028567966, 0.0029432084, 0.0030199417, 0.0030712087, 0.003167515, 0.0032250073, 0.0033256067, 0.003381356, 0.0034849246, 0.0035702474, 0.0036313771, 0.0037510833, 0.00384019, 0.003966889, 0.0040488546, 0.004167047, 0.004252885, 0.004379838, 0.0044727507, 0.004574291, 0.00471205, 0.0047997986, 0.004937566, 0.005029671, 0.00514824, 0.0053048325, 0.0054058833, 0.005540105, 0.0057100537, 0.0058249664, 0.005973036, 0.006159617, 0.0062898626, 0.0064600306, 0.006629364, 0.006834261, 0.006988211, 0.007179261, 0.0073722494, 0.0076025273, 0.00778084, 0.00799221, 0.008215379, 0.00844953, 0.008690171, 0.008979393, 0.009202718, 0.009471341, 0.009750504, 0.0100433715, 0.010349324, 0.010662668, 0.010996178, 0.011333439, 0.01169697, 0.012064186, 0.012461298, 0.012863405, 0.013285583, 0.013730934, 0.014200324, 0.014685097, 0.015196975, 0.015734857, 0.016297556, 0.016893033, 0.017511947, 0.018167816, 0.018863276, 0.019591853, 0.020363908, 0.021089928, 0.022042125, 0.022962019, 0.023940062, 0.024981752, 0.026096363, 0.02729456, 0.028448569, 0.030005332, 0.01561991
	};
	
}
